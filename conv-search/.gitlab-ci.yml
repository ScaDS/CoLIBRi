# Load image for Miniconda
image: continuumio/miniconda3:latest

# Docker volumes
variables:
  PIP_CACHE_DIR: "/opt/cache/pip"
  ENVS_DIR: "/opt/cpt-conda-envs"
  CONV_SEARCH_ENV: "cpt_ms-conv-search-env"

# Defined CI-stages
stages:
  - pre-checks
  - code-quality
  - testing
  - deploy
  - trigger

# Execute this before the script commands in the separate jobs
before_script:
  - export PIP_CACHE_DIR=$PIP_CACHE_DIR

# Create or update conda env, activate for the following jobs
conda:
  stage: pre-checks
  tags:
    - gpu-pc
  script:
    - conda --version
    - conda config --prepend envs_dirs $ENVS_DIR # Change the default path for conda environments
    - conda env update -f env_conv_search.yml || true # Update/Create conda env with project-specific dependencies
    - source activate $CONV_SEARCH_ENV
    - which pip # Check active env
    - pip list # Check installed dependencies

# Check code-style with Ruff
code-style-ruff:
  stage: code-quality
  tags:
    - gpu-pc
  before_script:
    - conda config --prepend envs_dirs $ENVS_DIR
    - source activate $CONV_SEARCH_ENV
  script:
    - ruff check src

# Check code for security issues and bugs
code-security-bandit:
  stage: code-quality
  tags:
    - gpu-pc
  before_script:
    - conda config --prepend envs_dirs $ENVS_DIR
    - source activate $CONV_SEARCH_ENV
  script:
    - python3 -m bandit -c pyproject.toml -r src

# Run unit tests
unit-tests:
  stage: testing
  tags:
    - gpu-pc
  before_script:
    - conda config --prepend envs_dirs $ENVS_DIR
    - source activate $CONV_SEARCH_ENV
  script:
    - echo "Testing code..."
    # - python -m pytest ./src/test -k "not create_preprocessing_results" # start testing; skip the example result creation

#Trigger cpt-app deployment
trigger_cpt_app_deploy_dev:
  stage: trigger
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
  script:
    - echo "Triggering deployment for cpt-app"
    - apt-get update
    - apt-get install -y curl
    - curl --request POST --form "token=$TRIGGER_TOKEN" --form "ref=develop" "https://git.sc.uni-leipzig.de/api/v4/projects/1986/trigger/pipeline"


#Trigger cpt-app deployment
trigger_cpt_app_deploy_main:
  stage: trigger
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  script:
    - echo "Triggering deployment for cpt-app"
    - apt-get update
    - apt-get install -y curl
    - curl --request POST --form "token=$TRIGGER_TOKEN" --form "ref=main" "https://git.sc.uni-leipzig.de/api/v4/projects/1986/trigger/pipeline"
